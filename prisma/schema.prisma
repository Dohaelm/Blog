datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  password      String?
 image     String   @default("/images/pdp.png")
  interests     String [] @default([])
  bio           String?

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]

  comments Comment[]
  likes Like[]


 followedBy    Follow[]        @relation("UserFollowedBy")
  following     Follow[]        @relation("UserFollowing")

  receivedNotifications Notification[] @relation("Receiver")

  emittedNotifications Notification[] @relation("Actor")
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

model Post {
  postId String  @id @default(auto()) @map("_id")  @db.ObjectId
  userId String @db.ObjectId
  title String 
  image String 
  topic String 
  body String 
  comments Comment[] 
  likes Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
   

  
}

model Comment {
  commentId String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId 
  userId String @db.ObjectId 
  text String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post Post @relation(fields:[postId] ,references:[postId], onDelete:Cascade)
  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

}

model Like {
  likeId String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId 
  userId String @db.ObjectId @unique
   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post Post @relation(fields:[postId], references:[postId], onDelete:Cascade)
  user User @relation(fields:[userId], references:[id], onDelete:Cascade)
}
model Follow {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  follower   User    @relation("UserFollowing", fields: [followerId], references: [id])
  followerId String  @db.ObjectId
  following  User    @relation("UserFollowedBy", fields: [followingId], references: [id])
  followingId String @db.ObjectId

  createdAt DateTime @default(now()) // Optional: Track when the follow action happened
}

model Notification {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId // The user receiving the notification
  actorId     String      @db.ObjectId // The user who performed the action
  postId      String?     @db.ObjectId // Optional: ID of the post related to the notification
  type        String      // Type of notification (e.g., 'like', 'comment', 'follow')
  message     String      // Custom message or description
  createdAt   DateTime    @default(now()) // Timestamp of when the notification was created
  isRead      Boolean     @default(false) // Flag to check if the notification has been read
  
  user        User        @relation("Receiver", fields: [userId], references: [id], onDelete: Cascade)
  actor       User        @relation("Actor", fields: [actorId], references: [id], onDelete: Cascade)
}
